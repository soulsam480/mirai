// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id   Int     @id @default(autoincrement())
  // for platform admins and mods
  name String?

  //auth
  email         String
  password      String
  emailVerified Boolean   @default(false)
  emailToken    String?
  otp           String?
  otpExpiry     DateTime?

  role    Role
  isOwner Boolean @default(false)
  isAdmin Boolean @default(false)

  owner       Institute @relation(fields: [instituteId], references: [id], onDelete: Cascade)
  instituteId Int       @unique

  tenant    Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId Int     @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  STUDENT
  INSTITUTE
  INSTITUTE_MOD
  ADMIN
}

model Institute {
  id     Int              @id @default(autoincrement())
  code   String?
  name   String
  status OnboardingStatus
  logo   String?

  batches     Batch[]
  departments Department[]
  courses     Course[]
  students    Student[]

  account Account?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum OnboardingStatus {
  ONBOARDED
  INPROGRESS
  PENDING
}

model Batch {
  id Int @id @default(autoincrement())

  institute   Institute @relation(references: [id], onDelete: Cascade, fields: [instituteId])
  instituteId Int

  duration     String
  durationType BatchDurationType
  status       BatchStatus
  name         String
  students     Student[]
}

enum BatchStatus {
  ACTIVE
  INACTIVE
}

enum BatchDurationType {
  YEAR
  MONTH
  WEEK
  DAY
}

//TODO: for future reference
// enum InstituteType{
//   ACADEMIC

// }

//TODO: add more details to student model
model Student {
  id    Int     @id @default(autoincrement())
  code  String? @unique
  uniId String?

  account Account?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Batch   Batch? @relation(fields: [batchId], references: [id])
  batchId Int?

  institute   Institute? @relation(fields: [instituteId], references: [id], onDelete: Cascade)
  instituteId Int?

  Department   Department? @relation(fields: [departmentId], references: [id])
  departmentId Int?

  course   Course? @relation(fields: [courseId], references: [id])
  courseId Int?

  // basics
  basics         StudentBasics?
  score          StudentScore?
  education      StudentEducation[]
  experience     StudentWorkExperience[]
  skills         Json                    @default("[]")
  projects       StudentProject[]
  certifications StudentCeritification[]
}

model StudentBasics {
  id Int @id @default(autoincrement())

  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId Int     @unique

  name             String
  dob              String
  gender           String
  category         String
  mobileNumber     String
  primaryEmail     String  @unique
  secondaryEmail   String? @unique
  permanentAddress Json    @default("{}")
  currentAddress   Json    @default("{}")
}

model StudentScore {
  id Int @id @default(autoincrement())

  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId Int     @unique

  aggregatePercentage String
  currentTerm         Int
  hasGraduated        Boolean @default(false)
  lateralEntry        Boolean

  // backlogs
  hasBacklog     Boolean
  totalBacklogs  Int     @default(0)
  // Why JSON ?
  // As this is going to be edited less frequently
  // adding a new table doesn't make sense
  // We can statically type this field using TS to ensure
  // the JSON schema remains same
  backlogDetails Json    @default("{}")

  // Why JSON ?
  // As this is going to be edited less frequently
  // adding a new table doesn't make sense
  // We can statically type this field using TS to ensure
  // the JSON schema remains same
  // Schema
  // ongoingNumBacklogs: Int ongoing sem backs
  // scoreValue: String CGPA
  // semScoreValue: String SGPA
  // term: Int SEM
  // totalNumBacklogs: Int total sem backs
  // verified: Bool
  // verifiedBy: String
  // verifiedOn: Date
  scores          Json     @default("{}")
  courseStartedAt DateTime

  verified   Boolean   @default(false)
  verifiedOn DateTime?
  verifiedBy String?
}

model StudentEducation {
  id Int @id @default(autoincrement())

  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId Int

  school          String
  program         String
  board           String
  specialization  String
  type            String
  notes           String
  score           String
  scorePercentage String
  scoreType       StudentScoreType
  startedAt       DateTime
  endedAt         DateTime?
  isOngoing       Boolean          @default(false)

  verified   Boolean   @default(false)
  verifiedOn DateTime?
  verifiedBy String?
}

enum StudentScoreType {
  PERCENTAGE
  CGPA
  GRADES
}

model StudentWorkExperience {
  id Int @id @default(autoincrement())

  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId Int

  company       String
  title         String
  location      String
  type          String
  isCurriculum  Boolean
  jobType       String
  companySector String
  stipend       String?
  notes         String?
  startedAt     DateTime
  endedAt       DateTime?
  isOngoing     Boolean   @default(false)

  verified   Boolean   @default(false)
  verifiedOn DateTime?
  verifiedBy String?
}

model StudentProject {
  id Int @id @default(autoincrement())

  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId Int

  title       String
  domain      String
  startedAt   DateTime
  endedAt     DateTime?
  isOngoing   Boolean   @default(false)
  description String?

  verified   Boolean   @default(false)
  verifiedOn DateTime?
  verifiedBy String?
}

model StudentCeritification {
  id Int @id @default(autoincrement())

  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId Int

  name                 String
  subject              String?
  institute            String
  documentName         String
  date                 DateTime?
  identificationNumber String?
  expiresAt            DateTime?
  score                String?
  scoreType            StudentScoreType?
  description          String?
}

model Department {
  id       Int     @id @default(autoincrement())
  name     String
  inCharge String?

  institute   Institute? @relation(fields: [instituteId], references: [id], onDelete: Cascade)
  instituteId Int?

  students Student[]
  courses  Course[]
}

model Course {
  id Int @id @default(autoincrement())

  institute   Institute? @relation(fields: [instituteId], references: [id], onDelete: Cascade)
  instituteId Int

  department   Department @relation(fields: [departmentId], references: [id])
  departmentId Int

  students Student[]

  branchName String
  branchCode String
  scoreType  CourseScoreType

  programName         String
  programDurationType ProgramDurationType
  programDuration     Int
  programLevel        ProgramLevel

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum CourseScoreType {
  CGPA
  PERCENTAGE
}

enum ProgramDurationType {
  SEMESTER
  YEAR
}

enum ProgramLevel {
  UG
  PG
  PHD
}
