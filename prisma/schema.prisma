// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASEURL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id   Int     @id @default(autoincrement())
  // for platform admins
  name String?

  //auth
  email         String
  password      String
  emailVerified Boolean   @default(false)
  emailToken    String?
  otp           String?
  otpExpiry     DateTime?

  role    Role
  isOwner Boolean @default(false)
  isAdmin Boolean @default(false)

  owner       Institute @relation(fields: [instituteId], references: [id], onDelete: Cascade)
  instituteId Int       @unique

  tenant    Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId Int     @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  STUDENT
  INSTITUTE
  ADMIN
}

model Institute {
  id     Int              @id @default(autoincrement())
  code   String?
  name   String
  status OnboardingStatus
  logo   String?

  batches Batch[]

  departments Department[]

  students Student[]
  account  Account?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum OnboardingStatus {
  ONBOARDED
  INPROGRESS
  PENDING
}

model Batch {
  id           Int               @id @default(autoincrement())
  institute    Institute         @relation(references: [id], onDelete: Cascade, fields: [instituteId])
  instituteId  Int
  duration     String
  durationType BatchDurationType
  status       BatchStatus
  name         String
  students     Student[]
}

enum BatchStatus {
  ACTIVE
  INACTIVE
}

enum BatchDurationType {
  YEAR
  MONTH
  WEEK
  DAY
}

//TODO: for future reference
// enum InstituteType{
//   ACADEMIC

// }

//TODO: add more details to student model
model Student {
  id    Int     @id @default(autoincrement())
  code  String? @unique
  uniId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Batch   Batch? @relation(fields: [batchId], references: [id], onDelete: Cascade)
  batchId Int?

  Institute   Institute? @relation(fields: [instituteId], references: [id], onDelete: Cascade)
  instituteId Int?

  Department   Department? @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  departmentId Int?

  // basics
  name             String
  dob              String
  gender           String
  category         String
  mobileNumber     String
  primaryEmail     String  @unique
  secondaryEmail   String? @unique
  permanentAddress String
  currentAddress   String

  account Account?
}

model Department {
  id       Int     @id @default(autoincrement())
  name     String
  inCharge String?

  institute   Institute? @relation(fields: [instituteId], references: [id], onDelete: Cascade)
  instituteId Int?

  students Student[]

  //TODO: add course relation

}
